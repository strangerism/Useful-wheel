local UTIL = require "illish.lib.util"
local NPC  = require "illish.lib.npc"
local axrc = axr_companions

local CLOSE_TIMEOUT

idiots_ui_OG_openUI = idiots_ui.openUI
function openUI(use_wheel)
  hide_hud_inventory()

  if not idiots_ui.GUI then
    local target = NPC.getTargetCompanion()

    if not target and #NPC.getCompanions() == 0 then
      actor_menu.set_msg(1, game.translate_string("st_no_companions"), 8)
      return
    end

    idiots_ui.GUI = idiots_ui.UIWheelCompanion(target and target:id() or nil)
    -- SendScriptCallback("idiots_on_open_ui", GUI)
  end

  if not use_wheel and idiots_ui.GUI and not idiots_ui.GUI:IsShown() then
    idiots_ui.GUI:SetAutoDelete(true)
    idiots_ui.GUI:AllowMovement(true)
    idiots_ui.GUI:ShowDialog(true)
    idiots_ui.GUI:Show(true)

    CLOSE_TIMEOUT = time_global()
    Register_UI("UIWheelCompanion", "idiots_ui")
  end
end


----- HOTKEY STUFF ------------

mod_keys = {
    [DIK_keys.DIK_LSHIFT]   = {pressed=false,code=1},
    [DIK_keys.DIK_LCONTROL] = {pressed=false,code=2},
    [DIK_keys.DIK_LMENU]    = {pressed=false,code=3},
}
function mod_key_pressed(key)
    if ui_mcm then
        return ui_mcm.get_mod_key(key)
    else
        return mod_keys and mod_keys[key] and mod_keys[key].pressed
    end
end

function on_key_press(key)

    -- printf("![Idiots] on key press %s", key)
    -- printf("![Idiots] key_bindings.kCUSTOM18 %s", key_bindings.kCUSTOM18)
    -- printf("[Idiots] DIK_keys.DIK_LCONTROL %s", DIK_keys.DIK_LCONTROL)
    -- printf("[Idiots] mod_key_pressed(DIK_keys.DIK_LCONTROL) %s", mod_key_pressed(2))
    -- printf("[Idiots] mod_keys[key] %s", mod_keys[key])

    if mod_keys[key] then
        mod_keys[key].pressed = true
        return
    end
    local bind = dik_to_bind(key)
    -- printf("![Idiots] bind %s", bind)
    -- printf("![Idiots] (bind == key_bindings.kCUSTOM18) and mod_key_pressed(2)= %s", (bind == key_bindings.kCUSTOM18) and mod_key_pressed(3))
    if bind == key_bindings.kCUSTOM18 and mod_key_pressed(mod_keys[DIK_keys.DIK_LMENU].code) then
        printf("-- [Idiots] openUI")
        local use_wheel = false
        openUI(use_wheel)
    end
end

function on_key_release(key)
    -- local do_action = false
    if mod_keys[key] then
        mod_keys[key].pressed = false
    end

  if (dik_to_bind(key) == key_bindings.kCUSTOM18) then
    local use_wheel = true
    openUI(use_wheel)
  end    
end

function on_game_start()
  printf("-- [idiots_on_game_start][idiots_z_keybind_mp]")
  RegisterScriptCallback("on_key_press",on_key_press)
  RegisterScriptCallback("on_key_release",on_key_release)
  UnregisterScriptCallback("on_key_release", idiots_keybinds.onKeyRelease)
end

idiots_ui_OG_Wheel_OnKeyboard = idiots_ui.UIWheelCompanion.OnKeyboard
function idiots_ui.UIWheelCompanion:OnKeyboard(dik, action)
  local res  = CUIScriptWnd.OnKeyboard(self, dik, action)
  local bind = dik_to_bind(dik)

  if res ~= false or action ~= ui_events.WINDOW_KEY_RELEASED then
    return res
  end

  if not UTIL.timeExpired(CLOSE_TIMEOUT + 500) then
    return
  end

  if bind == key_bindings.kQUIT or bind == key_bindings.kUSE or bind == key_bindings.kCUSTOM18
    then self:Close()
  end

  -- local mod_key_pressed = idiots_z_keybind_mp.mod_key_pressed(idiots_z_keybind_mp.mod_keys[DIK_keys.DIK_LMENU].code)
  -- printf("-- Monkey OnKeyboard mod_key_pressed %s", mod_key_pressed)
  
  -- if bind == key_bindings.kQUIT or bind == key_bindings.kUSE or (bind == key_bindings.kCUSTOM18 and mod_key_pressed)
  --   then self:Close()
  -- end

  return res
end

axrc_OG_Wheel_OnKeyboard = axrc.UIWheelCompanion.OnKeyboard
function UIWheelCompanion:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (res == false) then
		if keyboard_action == ui_events.WINDOW_KEY_RELEASED then
		
			local bind = dik_to_bind(dik)
			if (time_global() > axrc.cw_cooldown + 100) and (bind == key_bindings.kQUIT or bind == key_bindings.kUSE or bind == key_bindings.kCUSTOM18) then
				idiots_ui.GUI:Close()
				self:Close()
				return
			end
		
			-- for cmd,v in pairs(cw_commands) do
			-- 	if v.key and (dik == DIK_keys[v.key]) then
			-- 		self:Order(cmd)
			-- 		pass = false
			-- 		break
			-- 	end
			-- end
		end
	end
	return res
end

axrc_OG_Wheel_OnKeyboard = axrc.UIWheelCompanion.OnKeyboard
function cw_prepare()
	axrc.cw_commands["combat"]    = {	key= "DIK_1"	,on_state= 1	,get= axrc.get_companion_combat_mode		,set_one= axrc.set_companion_squad_combat_mode	,set_all= axrc.cycle_companions_combat_mode		,on_str= "st_set_companion_to_attack_state"					,off_str= "st_set_companion_to_ignore_combat_state"	}
	axrc.cw_commands["movement"]  = {	key= "DIK_2"	,on_state= 2	,get= axrc.get_companion_move_mode	    ,set_one= axrc.set_companion_squad_move_mode		,set_all= axrc.cycle_companions_move_mode		,on_str= "st_set_companion_to_follow_state"					,off_str= "st_set_companion_to_wait_state"			}
	axrc.cw_commands["stealth"]   = {	key= "DIK_3"	,on_state= 1	,get= axrc.get_companion_stealth_mode	,set_one= axrc.set_companion_squad_stealth_mode	,set_all= axrc.cycle_companions_stealth_mode		,on_str= "st_set_companion_to_stealth_substate"				,off_str= "st_set_companion_to_default_substate"	}
	axrc.cw_commands["distance"]  = {	key= "DIK_4"	,on_state= 2	,get= axrc.get_companion_distance_mode	,set_one= axrc.set_companion_squad_distance_mode	,set_all= axrc.cycle_companions_distance_mode	,on_str= "st_set_companion_to_stay_far"						,off_str= "st_set_companion_to_stay_close"			}
	axrc.cw_commands["loot"]      = {	key= "DIK_5"	,on_state= 1	,get= axrc.get_companion_loot_mode	    ,set_one= axrc.set_companion_squad_loot_mode		,set_all= axrc.cycle_companions_loot_mode		,on_str= "st_set_companion_to_loot_items_and_corpses"		,off_str= "st_set_companion_to_loot_nothing"		}
	axrc.cw_commands["trade"] 	 = {	key= "DIK_6"	,on_state= 1	,get= axrc.companion_inventory_mode		,set_one= axrc.start_trade						,off_str= "st_set_companion_to_trade"	}
end