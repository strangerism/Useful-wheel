local UTIL = require "illish.lib.util"
local NPC  = require "illish.lib.npc"
local axrc = axr_companions

local CLOSE_TIMEOUT

-- idiots_ui_OG_openUI = idiots_ui.openUI
function openUI(use_wheel)
  -- printf("$ [UW] openUI")
  hide_hud_inventory()

  if not idiots_ui.GUI then
    local target = NPC.getTargetCompanion()

    if not target and #NPC.getCompanions() == 0 then
      actor_menu.set_msg(1, game.translate_string("st_no_companions"), 8)
      return
    end

    idiots_ui.GUI = idiots_ui.UIWheelCompanion(target and target:id() or nil)
    -- SendScriptCallback("idiots_on_open_ui", GUI)
  end

  if not use_wheel and idiots_ui.GUI and not idiots_ui.GUI:IsShown() then
    idiots_ui.GUI:SetAutoDelete(true)
    idiots_ui.GUI:AllowMovement(true)
    idiots_ui.GUI:ShowDialog(true)
    idiots_ui.GUI:Show(true)

    Register_UI("UIWheelCompanion", "idiots_ui")
  end
  CLOSE_TIMEOUT = time_global()
end


----- HOTKEY STUFF ------------

mod_keys = {
    [DIK_keys.DIK_LSHIFT]   = {pressed=false,code=1},
    [DIK_keys.DIK_LCONTROL] = {pressed=false,code=2},
    [DIK_keys.DIK_LMENU]    = {pressed=false,code=3},
}
function mod_key_pressed(key)
    if ui_mcm then
        return ui_mcm.get_mod_key(key)
    else
        return mod_keys and mod_keys[key] and mod_keys[key].pressed
    end
end

function on_key_press(key)

    -- printf("![Idiots] on key press %s", key)
    -- printf("![Idiots] key_bindings.kCUSTOM18 %s", key_bindings.kCUSTOM18)
    -- printf("[Idiots] DIK_keys.DIK_LCONTROL %s", DIK_keys.DIK_LCONTROL)
    -- printf("[Idiots] mod_key_pressed(DIK_keys.DIK_LCONTROL) %s", mod_key_pressed(2))
    -- printf("[Idiots] mod_keys[key] %s", mod_keys[key])

    if mod_keys[key] then
        mod_keys[key].pressed = true
        return
    end
    local bind = dik_to_bind(key)
    -- printf("![Idiots] bind %s", bind)
    -- printf("![Idiots] (bind == key_bindings.kCUSTOM18) and mod_key_pressed(2)= %s", (bind == key_bindings.kCUSTOM18) and mod_key_pressed(3))
    if bind == key_bindings.kCUSTOM18 and mod_key_pressed(mod_keys[DIK_keys.DIK_LMENU].code) then
        -- printf("-- [Idiots] openUI")
        local use_wheel = false
        openUI(use_wheel)
    end
end

function on_key_release(key)
    -- local do_action = false
    if mod_keys[key] then
        mod_keys[key].pressed = false
    end

  if (dik_to_bind(key) == key_bindings.kCUSTOM18) then
    local use_wheel = true
    openUI(use_wheel)
  end
end

function on_game_start()
  -- printf("-- [idiots_on_game_start][idiots_z_keybind_mp]")
  RegisterScriptCallback("on_key_press",on_key_press)
  RegisterScriptCallback("on_key_release",on_key_release)
  UnregisterScriptCallback("on_key_release", idiots_keybinds.onKeyRelease)
  RegisterScriptCallback("on_key_release",axr_companions.on_key_release)
end

idiots_ui_OG_Wheel_OnKeyboard = idiots_ui.UIWheelCompanion.OnKeyboard
function idiots_ui.UIWheelCompanion:OnKeyboard(dik, action)
  -- printf("- [UW] idiots_ui.UIWheelCompanion:OnKeyboard CLOSE_TIMEOUT %s", CLOSE_TIMEOUT)
  local res  = CUIScriptWnd.OnKeyboard(self, dik, action)
  local bind = dik_to_bind(dik)

  if res ~= false or action ~= ui_events.WINDOW_KEY_RELEASED then
    return res
  end
  if zzzz_dynahud then -- compat with dynahud dynamic companion hud
    RemoveTimeEvent("companion_hud_keypress", "companion_hud_keypress_long")
  end
  if not UTIL.timeExpired(CLOSE_TIMEOUT + 500) then
    -- printf("![IW] GUI OPEN - TOO EARLY on CLOSE_TIMEOUT ")
    return
  end
  -- printf("-[IW] CLOSE_TIMEOUT EXPIRED")
  if bind == key_bindings.kQUIT or bind == key_bindings.kUSE or bind == key_bindings.kCUSTOM18
    then self:Close()
  end

  -- local mod_key_pressed = idiots_z_keybind_mp.mod_key_pressed(idiots_z_keybind_mp.mod_keys[DIK_keys.DIK_LMENU].code)
  -- printf("-- Monkey OnKeyboard mod_key_pressed %s", mod_key_pressed)
  
  -- if bind == key_bindings.kQUIT or bind == key_bindings.kUSE or (bind == key_bindings.kCUSTOM18 and mod_key_pressed)
  --   then self:Close()
  -- end

  return res
end

function update_axrc_squad_state(group)
    if group == "readiness" then
      axrc._current_states["combat"] = (axrc._current_states["combat"] == 1) and 2 or 1
    end
    if group == "movement" then
      axrc._current_states["move"] = (axrc._current_states["move"] == 1) and 2 or 1
    end
    if group == "stance" then
      axrc._current_states["stealth"] = (axrc._current_states["stealth"] == 1) and 2 or 1
    end
    if group == "distance" then
        axrc._current_states["distance"] = (axrc._current_states["distance"] == 1) and 2 or 1
    end
    if group == "jobs" then
        axrc._current_states["loot"] = (axrc._current_states["loot"] == 1) and 2 or 1
    end
end

idiots_ui_OG_Wheel_InitTabs = idiots_ui.UIWheelCompanion.InitTabs
function idiots_ui.UIWheelCompanion:InitTabs()
  idiots_ui_OG_Wheel_InitTabs(self)
  self.id = self.ID
end

idiots_ui_OG_Wheel_OnClickTab = idiots_ui.UIWheelCompanion.OnClickTab
function idiots_ui.UIWheelCompanion:OnClickTab(index)
  idiots_ui_OG_Wheel_OnClickTab(self,index)
  self.id = self.ID
end

idiots_ui_OG_Wheel_OnClickButton = idiots_ui.UIWheelCompanion.OnClickButton
function idiots_ui.UIWheelCompanion:OnClickButton(group, action)
  -- printf("- [UW] OnClickButton group %s action %s",group, action )
  -- self.ID is either set upstream with npc_id or null
  self.id = self.ID
  local clsid = axr_companions.list_actor_squad_by_id()
  if not self.ID then
    -- overcorrect case of 1 companion squad - useful idiots ui does not support "all" for this case and needs self.ID populated with npc id
    if #clsid == 1 then
          self.ID = clsid[1]
          self.id = self.ID
    end
    idiots_ui_OG_Wheel_OnClickButton(self, group, action)
    -- update the squad state in axr_companions
    update_axrc_squad_state(group)
  else
    idiots_ui_OG_Wheel_OnClickButton(self, group, action)
    if #clsid == 1 then
      update_axrc_squad_state(group)
    end    
  end
end

-- axrc_OG_Wheel_OnKeyboard = axrc.UIWheelCompanion.OnKeyboard
-- function axr_companions.UIWheelCompanion:OnKeyboard(dik, keyboard_action)
--   printf("- [UW] cw_cooldown %s", axrc.cw_cooldown)
-- 	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
-- 	if (res == false) then
-- 		if keyboard_action == ui_events.WINDOW_KEY_RELEASED then
		
-- 			local bind = dik_to_bind(dik)
-- 			if (time_global() > axrc.cw_cooldown + 500) and (bind == key_bindings.kQUIT or bind == key_bindings.kUSE or bind == key_bindings.kCUSTOM18) then
-- 				self:Close()
-- 				return
-- 			end
		
-- 			-- for cmd,v in pairs(cw_commands) do
-- 			-- 	if v.key and (dik == DIK_keys[v.key]) then
-- 			-- 		self:Order(cmd)
-- 			-- 		pass = false
-- 			-- 		break
-- 			-- 	end
-- 			-- end
-- 		end
-- 	end
-- 	return res
-- end
if axr_companions_va_gamma_patch then
  -- printf("-[UW] Monkey patch axr_companions_va_gamma_patch")
  axrc_OG_UIWheelCompanion_Order = axr_companions_va_gamma_patch.UIWheelCompanion_Order
  function axr_companions.UIWheelCompanion.Order(self, cmd)
    axrc_OG_UIWheelCompanion_Order(self, cmd)
  end
  
end



axrc_OG_UIWheelCompanion_Reset = axr_companions.UIWheelCompanion.Reset
function axr_companions.UIWheelCompanion:Reset(obj)
  axrc_OG_UIWheelCompanion_Reset(self, obj)
  if idiots_ui.GUI then
    idiots_ui.GUI.ID = axrc.GUI.id
    idiots_ui.GUI:UpdateTabs()
    idiots_ui.GUI:UpdateButtons()
    idiots_ui.GUI:UpdateTitlebar()
  end
end

local cw_commands = {}

axrc_OG_cw_prepare = axr_companions.cw_prepare
function axr_companions.cw_prepare()
  -- printf("- [UW] cw_prepare")
  cw_commands["combat"]    = {	key= "DIK_1"	,on_state= 1	,get= axrc.get_companion_combat_mode		,set_one= uw_set_companion_squad_combat_mode	,set_all= uw_cycle_companions_combat_mode		,on_str= "st_set_companion_to_attack_state"					,off_str= "st_set_companion_to_ignore_combat_state"	}
	cw_commands["movement"]  = {	key= "DIK_2"	,on_state= 2	,get= axrc.get_companion_move_mode	    ,set_one= uw_set_companion_squad_move_mode		,set_all= uw_cycle_companions_move_mode		,on_str= "st_set_companion_to_follow_state"					,off_str= "st_set_companion_to_wait_state"			}
	cw_commands["stealth"]   = {	key= "DIK_3"	,on_state= 1	,get= axrc.get_companion_stealth_mode	,set_one= uw_set_companion_squad_stealth_mode	,set_all= uw_cycle_companions_stealth_mode		,on_str= "st_set_companion_to_stealth_substate"				,off_str= "st_set_companion_to_default_substate"	}
	cw_commands["distance"]  = {	key= "DIK_4"	,on_state= 2	,get= axrc.get_companion_distance_mode	,set_one= uw_set_companion_squad_distance_mode	,set_all= uw_cycle_companions_distance_mode	,on_str= "st_set_companion_to_stay_far"						,off_str= "st_set_companion_to_stay_close"			}
	cw_commands["loot"]      = {	key= "DIK_5"	,on_state= 1	,get= axrc.get_companion_loot_mode	    ,set_one= uw_set_companion_squad_loot_mode		,set_all= uw_cycle_companions_loot_mode		,on_str= "st_set_companion_to_loot_items_and_corpses"		,off_str= "st_set_companion_to_loot_nothing"		}
	cw_commands["trade"] 	 = {	key= "DIK_6"	,on_state= 1	,get= axrc.companion_inventory_mode		,set_one= axrc.start_trade						,off_str= "st_set_companion_to_trade"	}

  axrc.cw_commands = cw_commands
end

-- single NPC

function uw_set_companion_squad_combat_mode(mode,npc,squad)
  -- printf("- [UW] uw_set_companion_squad_move_mode mode %s npc %s squad %s",mode, npc and npc:id(), squad )
  local group = "readiness"
  local action = (mode == 1) and "attack" or "ignore"
  if npc then
    idiots_ui.GUI.ID = npc:id()
  end
  idiots_ui.GUI:OnClickButton(group, action)
end

function uw_set_companion_squad_move_mode(mode,npc,squad)
  -- printf("- [UW] uw_set_companion_squad_move_mode mode %s npc %s squad %s",mode, npc and npc:id(), squad )
  local group = "movement"
  local action = (mode == 1) and "wait" or "follow"
  if npc then
    idiots_ui.GUI.ID = npc:id()
  end
  idiots_ui.GUI:OnClickButton(group, action)
end

function uw_set_companion_squad_stealth_mode(mode,npc,squad)
  -- printf("- [UW] uw_set_companion_squad_move_mode mode %s npc %s squad %s",mode, npc and npc:id(), squad )
  local group = "stance"
  local action = (mode == 1) and "sneak" or "stand"
  if npc then
    idiots_ui.GUI.ID = npc:id()
  end
  idiots_ui.GUI:OnClickButton(group, action)
end

function uw_set_companion_squad_distance_mode(mode,npc,squad)
  -- printf("- [UW] uw_set_companion_squad_move_mode mode %s npc %s squad %s",mode, npc and npc:id(), squad )
  local group = "distance"
  local action = (mode == 1) and "near" or "far"
  if npc then
    idiots_ui.GUI.ID = npc:id()
  end
  idiots_ui.GUI:OnClickButton(group, action)
end

function uw_set_companion_squad_loot_mode(mode,npc,squad)
  -- printf("- [UW] uw_set_companion_squad_loot_mode mode %s npc %s squad %s",mode, npc and npc:id(), squad )
  local group = "jobs"
  local action = "loot_corpses"
  if npc then
    idiots_ui.GUI.ID = npc:id()
  end
  idiots_ui.GUI:OnClickButton(group, action)
  -- idiots_ui.GUI:UpdateButtons()
end

-- ALL

function uw_cycle_companions_combat_mode(force_mode, no_msg)
  -- printf("- [UW] uw_cycle_companions_combat_mode force_mode %s no_msg %s",force_mode, no_msg)
  local group = "readiness"
  local action = (axrc._current_states["combat"] == 2) and "attack" or "ignore"
  idiots_ui.GUI.ID = nil
  idiots_ui.GUI:OnClickButton(group, action)
end

function uw_cycle_companions_move_mode(force_mode, no_msg)
  -- printf("- [UW] uw_cycle_companions_move_mode force_mode %s no_msg %s",force_mode, no_msg)
  local group = "movement"
  local action = (axrc._current_states["move"] == 2) and "wait" or "follow"
  printf("- group %s action %s", group, action)
  idiots_ui.GUI.ID = nil
  idiots_ui.GUI:OnClickButton(group, action)
end

function uw_cycle_companions_stealth_mode(force_mode, no_msg)
  -- printf("- [UW] uw_cycle_companions_stealth_mode force_mode %s no_msg %s",force_mode, no_msg)
  local group = "stance"
  local action = (axrc._current_states["stealth"] == 2) and "sneak" or "stand"
  idiots_ui.GUI.ID = nil
  idiots_ui.GUI:OnClickButton(group, action)
end

function uw_cycle_companions_distance_mode(force_mode, no_msg)
  -- printf("- [UW] cycle_companions_distance_mode force_mode %s no_msg %s",force_mode, no_msg)
  local group = "distance"
  local action = (axrc._current_states["distance"] == 2) and "near" or "far"
  idiots_ui.GUI.ID = nil
  idiots_ui.GUI:OnClickButton(group, action)
end

function uw_cycle_companions_loot_mode(force_mode, no_msg)
  -- printf("- [UW] uw_cycle_companions_loot_mode force_mode %s no_msg %s",force_mode, no_msg)
  local group = "jobs"
  local action = "loot_corpses"
  idiots_ui.GUI.ID = nil
  idiots_ui.GUI:OnClickButton(group, action)
  -- idiots_ui.GUI:UpdateButtons()
end